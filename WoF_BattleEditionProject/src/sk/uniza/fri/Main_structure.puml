@startuml

/' diagram meta data start
config=StructureConfiguration;
{
  "projectClassification": {
    "searchMode": "OpenProject", // OpenProject, AllProjects
    "includedProjects": "",
    "pathEndKeywords": "*.impl",
    "isClientPath": "",
    "isClientName": "",
    "isTestPath": "",
    "isTestName": "",
    "isMappingPath": "",
    "isMappingName": "",
    "isDataAccessPath": "",
    "isDataAccessName": "",
    "isDataStructurePath": "",
    "isDataStructureName": "",
    "isInterfaceStructuresPath": "",
    "isInterfaceStructuresName": "",
    "isEntryPointPath": "",
    "isEntryPointName": "",
    "treatFinalFieldsAsMandatory": false
  },
  "graphRestriction": {
    "classPackageExcludeFilter": "",
    "classPackageIncludeFilter": "",
    "classNameExcludeFilter": "",
    "classNameIncludeFilter": "",
    "methodNameExcludeFilter": "",
    "methodNameIncludeFilter": "",
    "removeByInheritance": "", // inheritance/annotation based filtering is done in a second step
    "removeByAnnotation": "",
    "removeByClassPackage": "", // cleanup the graph after inheritance/annotation based filtering is done
    "removeByClassName": "",
    "cutMappings": false,
    "cutEnum": true,
    "cutTests": true,
    "cutClient": true,
    "cutDataAccess": true,
    "cutInterfaceStructures": true,
    "cutDataStructures": true,
    "cutGetterAndSetter": true,
    "cutConstructors": true
  },
  "graphTraversal": {
    "forwardDepth": 3,
    "backwardDepth": 3,
    "classPackageExcludeFilter": "",
    "classPackageIncludeFilter": "",
    "classNameExcludeFilter": "",
    "classNameIncludeFilter": "",
    "methodNameExcludeFilter": "",
    "methodNameIncludeFilter": "",
    "hideMappings": false,
    "hideDataStructures": false,
    "hidePrivateMethods": true,
    "hideInterfaceCalls": true, // indirection: implementation -> interface (is hidden) -> implementation
    "onlyShowApplicationEntryPoints": false, // root node is included
    "useMethodCallsForStructureDiagram": "ForwardOnly" // ForwardOnly, BothDirections, No
  },
  "details": {
    "aggregation": "GroupByClass", // ByClass, GroupByClass, None
    "showClassGenericTypes": true,
    "showMethods": true,
    "showMethodParameterNames": true,
    "showMethodParameterTypes": true,
    "showMethodReturnType": true,
    "showPackageLevels": 2,
    "showDetailedClassStructure": true
  },
  "rootClass": "sk.uniza.fri.Main",
  "extensionCallbackMethod": "" // qualified.class.name#methodName - signature: public static String method(String)
}
diagram meta data end '/



digraph g {
    rankdir="TB"
    splines=polyline
    

'nodes 
subgraph cluster_111433751 { 
   	label=uniza
	labeljust=l
	fillcolor="#ececec"
	style=filled
   
   subgraph cluster_300750138 { 
   	label=fri
	labeljust=l
	fillcolor="#d8d8d8"
	style=filled
   
   AvailableCommands309758473[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)AvailableCommands</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ isCommand(commandName: String): boolean</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

BattleManager1501230192[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)BattleManager</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >- printBattleSummaryAfterRound(enemies: ArrayList&lt;ICreature&gt;, round: int)</TD></TR>
<TR><TD ALIGN="LEFT" >- removeDeadEnemies(enemiesInRoom: ArrayList&lt;ICreature&gt;): ArrayList&lt;ICreature&gt;</TD></TR>
<TR><TD ALIGN="LEFT" >+ startFight(player: Player, room: Room): boolean</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

BattleMap1501409045[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)BattleMap</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ createMap(game: Game): Room</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

Game1501230192[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Game</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   battleManager: BattleManager [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   battleMap: BattleMap [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   currentRoom: Room [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   parser: Parser [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   player: Player [0..1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >- endGame(command: Command): boolean</TD></TR>
<TR><TD ALIGN="LEFT" >- isLastRoom(currentRoom: Room): boolean</TD></TR>
<TR><TD ALIGN="LEFT" >- moveToRoom(command: Command)</TD></TR>
<TR><TD ALIGN="LEFT" >- performCommand(command: Command): boolean</TD></TR>
<TR><TD ALIGN="LEFT" >+ play()</TD></TR>
<TR><TD ALIGN="LEFT" >- printHelp()</TD></TR>
<TR><TD ALIGN="LEFT" >- printInvitation()</TD></TR>
<TR><TD ALIGN="LEFT" >- printRooms()</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

Main2086060368[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Main</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ main(args: String[])</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

Parser309758473[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Parser</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   commands: AvailableCommands [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   scanner: Scanner [0..1]</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

Player159310881[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Player</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   armor: float [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   damage: float [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   health: float [1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ doDamage(creature: ICreature)</TD></TR>
<TR><TD ALIGN="LEFT" >+ printInfo()</TD></TR>
<TR><TD ALIGN="LEFT" >+ takeDamage(damage: float)</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

Room1501409045[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Room</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   description: String [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   enemiesInRoom: ArrayList&lt;ICreature&gt; [0..*]</TD></TR>
<TR><TD ALIGN="LEFT" >-   leftExit: Room [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   middleExit: Room [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   rightExit: Room [0..1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ putEnemiesIntoRoom()</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

Skeleton707971382[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Skeleton</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   armor: float [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   damage: float [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   health: float [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   name: String [0..1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ doDamage(creature: ICreature)</TD></TR>
<TR><TD ALIGN="LEFT" >+ takeDamage(damage: float)</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];
} 
} 

'edges    
BattleManager1501230192 -> Player159310881[label="startFight() -> doDamage()"];
Game1501230192 -> BattleManager1501230192[label="battleManager
[0..1]"];
Game1501230192 -> BattleMap1501409045[label="battleMap
[0..1]"];
Game1501230192 -> Parser309758473[label="parser
[0..1]"];
Game1501230192 -> Player159310881[label="player
[0..1]"];
Game1501230192 -> Room1501409045[label="currentRoom
[0..1]"];
Main2086060368 -> Game1501230192[label="main() -> play()"];
Parser309758473 -> AvailableCommands309758473[label="commands
[0..1]"];
Player159310881 -> Skeleton707971382[arrowhead=none];
    
}
@enduml